# FastCGI cache settings
fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=WORDPRESS:50m inactive=60m;
fastcgi_cache_key "$scheme$request_method$host$request_uri";
fastcgi_cache_use_stale error timeout invalid_header updating http_500 http_503;
fastcgi_cache_valid 200 301 302 404 1h;
fastcgi_buffers 16 16k;
fastcgi_buffer_size 32k;
fastcgi_param SERVER_NAME $http_host;
fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
fastcgi_keep_conn on;

# Rate limiter settings
limit_req_zone $binary_remote_addr zone=WPRATELIMIT:10m rate=30r/m;

server {
	listen 80;
	server_name blog.example.com;

	root /var/www/html;
	index index.php;

	# Enable the FastCGI cache.
	set $skip_cache 0;

	# POST requests and URLs with a query string should always go to PHP.
	if ($request_method = POST) {
		set $skip_cache 1;
	}

	if ($query_string != "") {
		set $skip_cache 1;
	}

	# Don't cache URIs containing the following segments.
	if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
		set $skip_cache 1;
	}

	# Don't use the cache for logged-in users or recent commenters.
	if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
		set $skip_cache 1;
	}

	# Pass control of individual URI requests to WordPressâ€™s index.php file with the request arguments.
	location / {
		try_files $uri $uri/ /index.php$is_args$args;
	}

	# Handle the PHP processing.
	location ~ \.php$ {
		try_files $uri =404;
		include fastcgi_params;
		include /etc/nginx/conf.d/fastcgi;

		# Avoid exposing system info.
		fastcgi_hide_header X-Powered-By;

		# Cache dynamic files via FastCGI (see https://www.nginx.com/blog/9-tips-for-improving-wordpress-performance-with-nginx/#fastcgi).
		fastcgi_cache_bypass $skip_cache;
		fastcgi_no_cache $skip_cache;
		fastcgi_cache WORDPRESS;
		# Note: Different plugins may check different headers.
		add_header X-Cache $upstream_cache_status;
		add_header X-FastCGI-Cache $upstream_cache_status;
	}

	location ~ /purge(/.*) {
		fastcgi_cache_purge WORDPRESS "$scheme$request_method$host$1";
		access_log off;
	}

	# Cache static resources.
	location ~* ^.+.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf|swf)$ {
		access_log off;
		log_not_found off;
		expires max;
	}

	# Disable logging to favicon.ico and robots.txt files.
	location = /robots.txt {
		access_log off;
		log_not_found off;
	}

	location = /favicon.ico {
		access_log off;
		log_not_found off;
	}

	# Rate limit access to wp-login.php to block against brute force attacks.
	location = /wp-login.php {
		limit_req zone=WPRATELIMIT burst=1 nodelay;
		include fastcgi_params;
		include /etc/nginx/conf.d/fastcgi;
		fastcgi_hide_header X-Powered-By;
	}

        # Deny public access to wp-config.php.
	location ~* wp-config.php {
		deny all;
		access_log off; 
		log_not_found off; 
	}

	# Deny public access to xmlrpc.php.
	location ~* xmlrpc.php {
		deny all;
		access_log off; 
		log_not_found off; 
	}

        # Deny public access to hidden files.
	location ~ /\. { 
		deny all; 
		access_log off; 
		log_not_found off; 
	}

	# Deny public access to backup extensions & log files.
	location ~* ^.+\.(bak|log|old|orig|original|php#|php~|php_bak|save|swo|swp|sql)$ {
		deny all;
		access_log off;
		log_not_found off;
	}

	# Disallow PHP in the upload folder.
	location /wp-content/uploads/ {
		location ~ \.php$ {
			deny all;
		}
	}

	# Return 403 forbidden for readme.(txt|html) or license.(txt|html).
	if ($uri ~* "^.+(readme|license)\.(txt|html)$") {
		return 403;
	}
}
