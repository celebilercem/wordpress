version: '3'

services:
  # Official Elasticsearch image
  elasticsearch:
    image: 'docker.elastic.co/elasticsearch/elasticsearch:$ELASTIC_STACK_VERSION'
    container_name: 'elasticsearch'
    environment:
      - 'ES_JAVA_OPTS=-Xms1g -Xmx1g'
      - 'ELASTIC_PASSWORD=$ELASTIC_PASSWORD'
      - 'discovery.type=single-node'
      - 'ingest.geoip.downloader.enabled=false'
    volumes:
      - 'elasticsearch-config:/usr/share/elasticsearch/config'
      - 'elasticsearch-data:/usr/share/elasticsearch/data'
#    ports:
#      - '9200:9200'
    restart: 'always'

  # Official Kibana image
  kibana:
    depends_on:
      - 'elasticsearch'
    image: 'docker.elastic.co/kibana/kibana:$ELASTIC_STACK_VERSION'
    container_name: 'kibana'
    environment:
      - 'SERVER_PUBLICBASEURL=https://$HOST_KIBANA/'
      - 'XPACK_REPORTING_ROLES_ENABLED=false'
      - 'XPACK_REPORTING_KIBANASERVER_HOSTNAME=localhost'
      - 'XPACK_REPORTING_ENCRYPTIONKEY=$ELASTIC_ENCRYPTIONKEY'
      - 'XPACK_SECURITY_ENCRYPTIONKEY=$ELASTIC_ENCRYPTIONKEY'
      - 'XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=$ELASTIC_ENCRYPTIONKEY'
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.kibana.rule=Host(`$HOST_KIBANA`)'
      - 'traefik.http.routers.kibana.entrypoints=websecure'
      - 'traefik.http.routers.kibana.tls=true'
      - 'traefik.http.routers.kibana.service=kibana'
      - 'traefik.http.services.kibana.loadbalancer.server.port=5601'
    volumes:
      - 'kibana-config:/usr/share/kibana/config'
      - 'kibana-data:/usr/share/kibana/data'
#    ports:
#      - '5601:5601'
    restart: 'always'

  # Official Fluentd image with additional plugins (see https://github.com/fluent/fluentd-docker-image#how-to-build-your-own-image)
  fluentd:
    depends_on:
      - 'elasticsearch'
    build: './build/fluentd'
    image: 'fluentd-with-plugins:1.16-1'
    container_name: 'fluentd'
    volumes:
      - './etc/fluentd:/fluentd/etc:ro'
    ports:
      - '127.0.0.1:24224:24224'
      - '127.0.0.1:24224:24224/udp'
    restart: 'always'

  # Official Traefik image
  image: 'traefik:latest'
    container_name: 'traefik'
    environment:
      - 'CF_API_EMAIL=$CF_API_EMAIL'
      - 'CF_API_KEY=$CF_API_KEY'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - './etc/traefik:/config'
      - './etc/letsencrypt:/letsencrypt'
    command:
      - '--providers.file.filename=/config/dynamic.yml'
      - '--providers.docker=true'
      - '--providers.docker.exposedByDefault=false'
      - '--api.dashboard=true'
      - '--certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=cloudflare'
      - '--certificatesResolvers.letsencrypt.acme.dnsChallenge.disablePropagationCheck=true' # This is not recommended, but without it the request fails
      - '--certificatesResolvers.letsencrypt.acme.dnsChallenge.delayBeforeCheck=30' # Delay to allow the Let's Encrypt server to validate the request (necessary without the propagation check)
      - '--certificatesResolvers.letsencrypt.acme.email=$CF_API_EMAIL'
      - '--certificatesResolvers.letsencrypt.acme.storage=/letsencrypt/acme.json'
      - '--entryPoints.web.address=:80'
      - '--entryPoints.web.http.redirections.entryPoint.to=websecure'
      - '--entryPoints.websecure.address=:443'
      - '--entryPoints.websecure.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS' # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips
      - '--entryPoints.websecure.http.tls=true'
      - '--entryPoints.websecure.http.tls.certResolver=letsencrypt'
      - '--entryPoints.websecure.http.tls.domains[0].main=example.com'
      - '--entryPoints.websecure.http.tls.domains[0].sans=*.example.com'
      - '--entryPoints.websecure.http.middlewares=secure-headers@file,rate-limit@file'
#      - '--log.level=DEBUG'
      - '--log.format=common'
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'    
      - 'traefik.enable=true'
      - 'traefik.http.routers.dashboard.rule=Host(`$HOST_TRAEFIK`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))'
      - 'traefik.http.routers.dashboard.entryPoints=websecure'
      - 'traefik.http.routers.dashboard.tls=true'
      - 'traefik.http.routers.dashboard.service=api@internal'
      - 'traefik.http.routers.dashboard.middlewares=basic-auth@file'
    ports:
      - '80:80'
      - '443:443'
    restart: 'always'

  # Official MariaDB image
  mysql:
    depends_on:
      - 'fluentd'
    image: 'mariadb:10'
    container_name: 'mysql'
    environment:
      - 'MARIADB_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD'
      - 'MARIADB_USER=$MYSQL_USER'
      - 'MARIADB_PASSWORD=$MYSQL_PASSWORD'
      - 'MARIADB_DATABASE=$MYSQL_DATABASE'
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    volumes:
      - './etc/mysql/conf.d:/etc/mysql/conf.d:ro'
      - 'mysql-data:/var/lib/mysql'
#    ports:
#      - '3306:3306'
    logging:
      driver: 'fluentd'
      options:
        # See https://docs.docker.com/config/containers/logging/log_tags/.
        tag: '{{.DaemonName}}.{{.Name}}'
    restart: 'always'

  # Official Redis image
  redis:
    depends_on:
      - 'fluentd'
    image: 'redis:alpine'
    container_name: 'redis'
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    volumes:
      - 'redis-data:/data'
#    ports:
#      - '6379:6379'
    logging:
      driver: 'fluentd'
      options:
        tag: '{{.DaemonName}}.{{.Name}}'
    restart: 'always'

  # Official Wordpress image with PHP-FPM
  wordpress:
    depends_on:
      - 'fluentd'
      - 'mysql'
      - 'redis'
    build:
      context: './build/wordpress'
      args:
        WORDPRESS_VERSION: '$WORDPRESS_VERSION'
    image: 'wordpress:$WORDPRESS_VERSION'
    container_name: 'wordpress'
    environment:
      - 'WORDPRESS_DB_HOST=mysql'
      - 'WORDPRESS_DB_USER=$MYSQL_USER'
      - 'WORDPRESS_DB_PASSWORD=$MYSQL_PASSWORD'
      - 'WORDPRESS_DB_NAME=$MYSQL_DATABASE'
      - WORDPRESS_CONFIG_EXTRA=
          define('WP_REDIS_HOST', 'redis');
          define('WP_REDIS_PORT', '6379');
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    volumes:
      - './etc/php/custom.ini:/usr/local/etc/php/conf.d/custom.ini:ro'
      - 'html-data:/var/www/html'
#    ports:
#      - '9000:9000'
    logging:
      driver: 'fluentd'
      options:
        tag: '{{.DaemonName}}.{{.Name}}'
    restart: 'always'

  # Official NGINX image with third-party modules (see https://github.com/nginxinc/docker-nginx/tree/master/modules)
  nginx:
    depends_on:
      - 'fluentd'
      - 'wordpress'
    build:
      # curl -o ./nginx/Dockerfile https://raw.githubusercontent.com/nginxinc/docker-nginx/master/modules/Dockerfile.alpine
      context: './build/nginx'
      args:
        # echo "https://github.com/FRiCKLE/ngx_cache_purge/archive/2.3.tar.gz" > ./nginx/cachepurge/source
        ENABLED_MODULES: 'cachepurge'
    image: 'nginx-with-modules:$NGINX_VERSION'
    container_name: 'nginx'
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.nginx.rule=Host(`$HOST_NGINX`)'
      - 'traefik.http.routers.nginx.entrypoints=websecure'
      - 'traefik.http.routers.nginx.service=nginx'
      - 'traefik.http.services.nginx.loadbalancer.server.port=80'
    volumes:
      - './etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro'
      - './etc/nginx/conf.d:/etc/nginx/conf.d:ro'
      - 'html-data:/var/www/html'
#    ports:
#      - '80:80'
    logging:
      driver: 'fluentd'
      options:
        tag: '{{.DaemonName}}.{{.Name}}'
    restart: 'always'

  # Official Watchtower image
  watchtower:
    image: 'containrrr/watchtower:latest'
    container_name: 'watchtower'
    environment:
      - 'WATCHTOWER_CLEANUP=true'
      - 'WATCHTOWER_POLL_INTERVAL=21600'
      - 'WATCHTOWER_LABEL_ENABLE=true'
      - 'WATCHTOWER_NOTIFICATIONS=email'
      - 'WATCHTOWER_NOTIFICATION_EMAIL_SERVER=172.17.0.1'
      - 'WATCHTOWER_NOTIFICATION_EMAIL_FROM=watchtower@example.com'
      - 'WATCHTOWER_NOTIFICATION_EMAIL_TO=admin@example.com'
      - 'WATCHTOWER_WARN_ON_HEAD_FAILURE=never'
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    restart: 'always'

volumes:
  elasticsearch-config:
  elasticsearch-data:
  kibana-config:
  kibana-data:
  mysql-data:
  redis-data:
  html-data:
