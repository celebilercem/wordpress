version: '3'

services:
  # Official Elasticsearch image
  elasticsearch:
    image: 'elasticsearch:8.4.2'
    container_name: 'elasticsearch'
    volumes:
      - './etc/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro'
      - './etc/elasticsearch/jvm.options.d:/usr/share/elasticsearch/config/jvm.options.d:ro'
    #ports:
    #  - 9200:9200
    restart: 'always'

  # Official Kibana image
  kibana:
    depends_on:
      - 'elasticsearch'
    image: 'kibana:8.4.2'
    container_name: 'kibana'
    volumes:
      - './etc/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro'
    ports:
      - '127.0.0.1:5601:5601'
    restart: 'always'

  # Official Fluentd image with additional plugins (see https://github.com/fluent/fluentd-docker-image#how-to-build-your-own-image)
  fluentd:
    depends_on:
      - 'elasticsearch'
    build: './build/fluentd'
    image: 'fluentd-with-plugins:1.15.2-1.0'
    container_name: 'fluentd'
    volumes:
      - './etc/fluentd:/fluentd/etc:ro'
    ports:
      - '127.0.0.1:24224:24224'
      - '127.0.0.1:24224:24224/udp'
    restart: 'always'
      
  # Official MariaDB image
  mysql:
    depends_on:
      - 'fluentd'
    image: 'mariadb:10.9.3'
    container_name: 'mysql'
    env_file: '.env'
    environment:
      - 'MYSQL_DATABASE=wordpress'
    volumes:
      - 'mysql-data:/var/lib/mysql'
      - './etc/mysql/conf.d:/etc/mysql/conf.d:ro'
    #ports:
    #  - '3306:3306'
    logging:
      driver: 'fluentd'
      options:
        # See https://docs.docker.com/config/containers/logging/log_tags/.
        tag: '{{.DaemonName}}.{{.Name}}'
    restart: 'always'

  # Official Redis image
  redis:
    depends_on:
      - 'fluentd'
    image: 'redis:7.0.4-alpine'
    container_name: 'redis'
    volumes:
      - './etc/redis:/usr/local/etc/redis:ro'
      - 'redis-data:/data'
    command: 'redis-server /usr/local/etc/redis/redis.conf'
    #ports:
    #  - '6379:6379'
    logging:
      driver: 'fluentd'
      options:
        tag: '{{.DaemonName}}.{{.Name}}'
    restart: 'always'

  # Official Wordpress image with PHP-FPM
  wordpress:
    depends_on:
      - 'fluentd'
      - 'mysql'
      - 'redis'
    build: './build/wordpress'
    image: 'wordpress:6.0.2-php8.1-fpm-alpine'
    container_name: 'wordpress'
    env_file: .env
    environment:
      - 'WORDPRESS_DB_HOST=mysql'
      - 'WORDPRESS_DB_USER=$MYSQL_USER'
      - 'WORDPRESS_DB_PASSWORD=$MYSQL_PASSWORD'
      - 'WORDPRESS_DB_NAME=wordpress'
      - WORDPRESS_CONFIG_EXTRA=
          define('WP_REDIS_HOST', 'redis');
          define('WP_REDIS_PORT', '6379');
    volumes:
      - 'html-data:/var/www/html'
      - './etc/php/custom.ini:/usr/local/etc/php/conf.d/custom.ini:ro'
    #ports:
    #  - '9000:9000'
    logging:
      driver: 'fluentd'
      options:
        tag: '{{.DaemonName}}.{{.Name}}'
    restart: 'always'

  # Official NGINX image with third-party modules (see https://github.com/nginxinc/docker-nginx/tree/master/modules)
  nginx:
    depends_on:
      - 'fluentd'
      - 'wordpress'
    build:
      # curl -o ./nginx/Dockerfile https://raw.githubusercontent.com/nginxinc/docker-nginx/master/modules/Dockerfile.alpine
      context: './build/nginx'
      args:
        # echo "https://github.com/FRiCKLE/ngx_cache_purge/archive/2.3.tar.gz" > ./nginx/cachepurge/source
        ENABLED_MODULES: 'cachepurge'
    image: 'nginx-with-modules:1.23.1'
    container_name: 'nginx'
    volumes:
      - 'html-data:/var/www/html'
      # curl -sSLo ./etc/nginx/conf.d/options-ssl-nginx.conf https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf
      - './etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro'
      - './etc/nginx/conf.d:/etc/nginx/conf.d:ro'
      - 'certbot-etc:/etc/letsencrypt:ro'
      - './etc/ssl:/etc/ssl:ro'
    ports:
      - '80:80'
      - '443:443'
    logging:
      driver: 'fluentd'
      options:
        tag: '{{.DaemonName}}.{{.Name}}'
    restart: 'always'

  certbot:
    depends_on:
      - 'nginx'
    image: 'certbot/certbot'
    container_name: certbot
    volumes:
      - 'html-data:/var/www/html'
      - 'certbot-etc:/etc/letsencrypt'
    #command: 'certonly --webroot --webroot-path=/var/www/html --email mail@example.com --agree-tos --no-eff-email --staging -d example.com -d www.example.com'
    command: 'certonly --webroot --webroot-path=/var/www/html --email mail@example.com --agree-tos --no-eff-email --force-renewal -d example.com -d www.example.com'

volumes:
  mysql-data:
  redis-data:
  html-data:
  certbot-etc:
